# 증가 감소 : $inc
# inc 연산자는 증가,감소만을 하는 것이 아니라 필드가 없으면 생성도 해줌.

db.people.updateOne({'username':'joe','location':'서울'},{$inc : {'score':50}})

db.people.updateOne({'username':'joe','location':'서울'},{$inc : {'score':10000}})

# $inc 연산자를 사용하는 경우에는 필드의 값이나 갱신할 값이 숫자여야만 한다.

# null,bool,문자열로 나타낸 숫자와 같이 여러 언어에서 숫자로 변환되는 데이터형의 값에서는 사용할 수 없다.


db.blog.posts.insertOne({'_id':ObjectId(),'title':'A blog post','content':'....'})

# $push는 배열이 이미 있다면 배열 끝에 요소를 추가함. 존재하지 않으면 새 배열 생성.

db.blog.posts.updateOne({'title':'A blog post'},{$push : {'contents':{'name':'joe','email':'sdj11123@gmail.com','content':'nice post.'}}})

db.blog.posts.updateOne({'title':'A blog post'},{$push : {'contents':{'name':'bob','email':'bob@gmail.com','content':'good post.'}}})

db.blog.posts.updateOne({'title':'A blog post'},{$set : {'top10':['Green Eggs and Ham']}})


# $each: 한 번에 여러개의 값을 추가, 사용하기 위해서는 필드가 배열이여야 한다.

db.blog.posts.updateOne({'title':'A blog post'},{$push:{'top10': {$each : ['Nightmare on Elm Street','Saw']}}})

# slice -10은 도큐먼트가 10개 이내이면 추가하고 10이 되면 추가하지 않도록 해라.

# 만약 10이 넘는다면, 처음 만들었던 도큐먼트를 삭제하고 밀어넣는다.

db.blog.posts.updateOne({'title':'A blog post'},{$push:{'top10': {$each : ['스타워치','겨울왕국','증인'],$slice: -10}}})

db.blog.posts.updateOne({'title':'A blog post'},{$set : {'top10':[]}})

# $sort 시 -1 : 내림차순
# slice와 sort는 each와 같이 사용해야 한다.

db.blog.posts.updateOne({'title':'A blog post'},{$push:{'top10': {$each : [{'name':'이숭무','rating':4.3},{'name':'Saw','rating':6.6}],$slice:-10,$sort:{'rating':-1}}}})

db.blog.posts.updateOne({'title':'A blog post'},{$push:{'hourly':{$each:[123,524,3457,568,124,6735,754,245]}}})


### 중복데이터 없이 추가

db.users.insertOne({'_id':ObjectId(),'username':'joe','email':['joe@example.com','joe@naver.com','joe@daum.net']})


# 값이 중복이 된다면, 추가되지 않는다. (중복을 피함) / addToSet

db.users.updateOne({'username':'joe'},{$addToSet:{'email':'joe@example.com'}})

db.users.updateOne({'username':'joe'},{$addToSet:{'email':'joe@nate.com'}})


# 고유의 값을 여러개 추가하려면 $addToSet과 $each를 결합함 / example이 추가 되지않았음.

db.users.updateOne({'username':'joe'},{$addToSet:{'email':{$each:['joe@php.net','joe@example.com','joe@python.org']}}})


# 요소 제거 : $pull

db.users.updateOne({},{$pull:{'email':'joe@python.org'}})



db.blog.posts.find().pretty()

db.blog.posts.updateOne({'title':'A blog post'},{$push:{'contents':{'name':'rhee','email':'rhee@example.com','content':'rhee post.'}}})

db.blog.posts.updateOne({'title':'A blog post'},{$push:{'contents':{'name':'jang','email':'jang@example.com','content':'jang post.'}}})


# 배열의 위치(인덱스) 기반 변경

db.blog.posts.updateOne({'title':'A blog post'},{$set:{'contents.1.name':'이숭무'}})


# $는 조건절에 맞는 index를 가져오는 것.

db.blog.posts.updateOne({'contents.name':'이숭무'},{$set:{'contents.$.email':'이숭무@example.com'}})


# 갱신 입력 / 만약에 url이 /blog인 것이 있다면, pageViews를 1 늘려주고, 없다면 url과 pageViews를 만들어준다.

db.analytics.insertOne({'_id':ObjectId(),'url':'www.example.com','pageViews':53})

var blog = db.analytics.findOne({url:'/blog'});

if(blog){ 
	db.analytics.updateOne({url:'/blog'},{$inc:{pageViews:1}});
}else{
	db.analytics.insertOne({url:'/blog',pageViews:1});
}

# upset을 사용하여 위의 if문처럼 작동하게 만들 수 있다!

db.analytics.updateOne({'url':'/blog'},{$inc:{'pageViews':1}},{'upset':true});



# 조건절에 맞는 것을 배열 필터를 사용해 갱신할 수 있다.

db.blog.posts.updateOne({'title':'A blog post'},{$set:{'top10.$[elem].subject':'제목'}},{arrayFilters:[{'elem.rating':{$lte:5}}]})


# 다중 도큐먼트 갱신

db.users.insertMany([{'_id':ObjectId(),'name':'joe','age':65,'sex':'male','location':'wisconsin'},{'_id':ObjectId(),'name':'joe','age':21,'sex':'male','location':'wisconsin'},{'_id':ObjectId(),'name':'joe','age':49,'sex':'male','location':'wisconsin'}])

db.users.updateMany({'name':'joe'},{$set:{'gift':'Happy Birthday!'}})





# 쿼리 : find()

db.people.find({'score':10050}).pretty()

db.users.find({'age':65}).pretty()

db.users.find({'name':'joe','age':65}).pretty()


# 전체 인자에서 id는 출력하지 않고 name,age,location만 출력

db.users.find({},{'_id':0,'name':1,'age':1,'location':1}).pretty()

# id만 제거하고 모두 출력

db.users.find({},{'_id':0}).pretty()

# id와 name을 제외하고 모두 출력

db.users.find({},{'_id':0,'name':0}).pretty()

# 특정 범위 내에서 원하는 값을 출력

db.users.find({'age':{'$gte':18 , '$lte':30}}).pretty()

// ne : not equals
db.users.find({'age':{'$ne':21}}).pretty()

// in : 배열 내에 있는 인자와 같은 것들만.
db.users.find({'age':{'$in':[21,65]}}).pretty()

// 
db.users.find({'name':{'$in':['joe',1234]}}).pretty()

db.users.updateMany({'name':'joe'},{$set:{'birthday':'10/13/1978'}})

db.users.find({'birthday':{'$lt':'2007/01/01'}})


start = new Date('01/01/2007')

db.users.find({'birthday':{'$lt':start}}) / 출력이 안됨. start는 ms(밀리세컨드) 까지 단위가 구해졌기 때문.

db.users.find({'birthday':{'$ne':start}})


# 둘은 같다. not과 in을 사용해도 되고 nin을 사용해도 됨.
db.users.find({'age':{'$nin':[21,65]}}).pretty()
db.users.find({'age':{'$not':{'$in':[21,65]}}}).pretty()


db.users.updateOne({'age':21},{$set:{'location':'Busan'}})


#  여러개의 필드를 비교하기
# or 연산자를 사용하여 DB의 or처럼 조건문 분기가 가능하다.
db.users.find({'$or': [{'age':49},{'location':'Busan'}]}).pretty()

# 조건문 연산 내부에 nin같은 다른 조건문 연산자를 넣을 수도 있다
db.users.find({'$or': [{'age':{'$nin':[49,21]}},{'location':'Busan'}]}).pretty()


# 나머지 연산. $mod 사용.
db.users.find({'age':{'$mod':[5,1]}}).pretty()
db.users.find({'age':{'$not':{'$mod':[5,1]}}}).pretty()


# null 값 확인
db.c.insertMany([{'_id':ObjectId(),'y':null},{'_id':ObjectId(),'y':1},{'_id':ObjectId(),'y':2}])
db.c.find({'y':null}).pretty()
db.c.find({'z':null}).pretty()  / 없는 컬럼에서 비교시, 비교 대상이 없기 때문에 전체가 출력됨!


# 필드가 존재하는 경우에만 출력
db.c.find({'z':{'$eq':null,'$exists':true}}).pretty()


# 배열에 쿼리하기
db.food.insertOne({'fruit':['apple','banana','peach']})
db.food.findOne({'fruit':'apple'})


# 2개 이상의 요소가 일치하는 배열을 찾을 때.    $all 사용
db.food.find({'fruit':'banana'}).pretty()
db.food.find({'fruit':{'$all':['banana','apple']}}).pretty()
db.food.find({'fruit':{'$all':['orange','apple']}}).pretty()

# 배열의 순서가 일치하지 않아도 요소만 갖추고 있다면 출력된다.
db.food.find({'fruit':{'$all':['orange','apple','kumquat']}}).pretty()


# index가 2인 요소가 peach 인 것만.
db.food.find({'fruit.2':'peach'})

db.food.updateOne({'fruit.2':'peach'},{'$push':{'fruit':'kiwi'}})


# 배열의 사이즈로 검색
db.food.find({'fruit':{$size:3}}).pretty()
db.food.find({'fruit':{$size:4}}).pretty()


# 배열 갱신
db.food.update({'fruit':'banana'},{'$push':{'fruit':'strawberry'}})

var criteria = {'fruit':'banana'}
db.food.update(criteria,{'$push':{'fruit':'strawberry'}})
db.food.update(criteria,{'$push':{'fruit':'strawberry'},'$inc':{'size':1}})



# size가 1보다 큰 것만 출력
db.food.find({'size':{'$gte':1}}).pretty()


# slice 연산자.     -를 사용하면 뒤에서부터, 배열로 생성해주면 [index 시작위치, 갯수]
db.blog.posts.findOne({'title':'A blog post'},{'contents':{'$slice':2}})
db.blog.posts.findOne({'title':'A blog post'},{'contents':{'$slice':-2}})
db.blog.posts.findOne({'title':'A blog post'},{'contents':{'$slice':[2,2]}})
db.blog.posts.findOne({'contents.name':'jang'},{'contents.$':1})



# 배열 및 범위 쿼리의 상호작용
db.collectionName.insertOne({'x':5})
db.collectionName.insertOne({'x':15})
db.collectionName.insertOne({'x':25})
db.collectionName.insertOne({'x':[5,25]})

# 배열 내에 5와 25가 조건에 부합하기때문에 참으로 나옴.
db.collectionName.find({'x':{'$gt':10,'$lt':20}})

# x:15는 배열이 아니기 때문에 출력이 되지 않았음. elemMatch는 배열 안의 범위에 내가 원하는 조건이 있는 구문만 출력이 됨.
db.collectionName.find({'x':{'$elemMatch':{'$gt':10,'$lt':20}}})

# 위의 조건과 맞는 배열을 생성해주었기 때문에, 출력이 가능함.
db.collectionName.insertOne({'x':[13,18]})



# 내장 도큐먼트에 쿼리하기
db.blog.posts.findOne({'title':'A blog post'})
db.blog.posts.find({'contents.name':'joe','contents.email':'sdj11123@gmail.com'})

# 결과 없음.
db.blog.posts.find({'contents':{'name':'joe','email':'sdj11123@gmail.com'}})

db.blog.posts.find({'top10.name':'이숭무','top10.rating':{'$lt':5}})


# 제한, 건너뛰기, 정렬
db.c.find()
db.c.find().limit(2) # 갯수 제한
db.c.find().skip(2) # 앞에서부터 스킵
db.users.find().sort({'age':1}).pretty() # 1 : 오름차순, -1 : 내림차순
db.users.find().sort({'age':-1}).pretty()
db.users.find().sort({'name':1,'age':-1}).pretty()
db.users.find().sort({'name':1,'age':-1}).limit(2).pretty() # 혼용 가능.

db.users.find().limit(2).sort({'age':1,}).pretty() # 순서를 바꿀 수도 있음.
db.users.find().sort({'name':1,'age':-1}).limit(2).skip(1).pretty() # 전부 다 혼용할 수 있음!

